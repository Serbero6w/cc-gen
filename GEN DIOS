
<html lang="en"><head><script type="text/javascript" async="" src="https://www.google-analytics.com/analytics.js"></script><script>(function(){function hookGeo() {
    //<![CDATA[
    const WAIT_TIME = 100;
    const hookedObj = {
      getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
      watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
      fakeGeo: true,
      genLat: 38.883333,
      genLon: -77.000
    };
  
    function waitGetCurrentPosition() {
      if ((typeof hookedObj.fakeGeo !== 'undefined')) {
        if (hookedObj.fakeGeo === true) {
          hookedObj.tmp_successCallback({
            coords: {
              latitude: hookedObj.genLat,
              longitude: hookedObj.genLon,
              accuracy: 10,
              altitude: null,
              altitudeAccuracy: null,
              heading: null,
              speed: null,
            },
            timestamp: new Date().getTime(),
          });
        } else {
          hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
        }
      } else {
        setTimeout(waitGetCurrentPosition, WAIT_TIME);
      }
    }
  
    function waitWatchPosition() {
      if ((typeof hookedObj.fakeGeo !== 'undefined')) {
        if (hookedObj.fakeGeo === true) {
          navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
          return Math.floor(Math.random() * 10000); // random id
        } else {
          hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        }
      } else {
        setTimeout(waitWatchPosition, WAIT_TIME);
      }
    }
  
    Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
      hookedObj.tmp_successCallback = successCallback;
      hookedObj.tmp_errorCallback = errorCallback;
      hookedObj.tmp_options = options;
      waitGetCurrentPosition();
    };
    Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
      hookedObj.tmp2_successCallback = successCallback;
      hookedObj.tmp2_errorCallback = errorCallback;
      hookedObj.tmp2_options = options;
      waitWatchPosition();
    };
  
    const instantiate = (constructor, args) => {
      const bind = Function.bind;
      const unbind = bind.bind(bind);
      return new (unbind(constructor, null).apply(null, args));
    }
  
    Blob = function (_Blob) {
      function secureBlob(...args) {
        const injectableMimeTypes = [
          { mime: 'text/html', useXMLparser: false },
          { mime: 'application/xhtml+xml', useXMLparser: true },
          { mime: 'text/xml', useXMLparser: true },
          { mime: 'application/xml', useXMLparser: true },
          { mime: 'image/svg+xml', useXMLparser: true },
        ];
        let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));
  
        if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
          const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
          if (mimeTypeIndex >= 0) {
            let mimeType = injectableMimeTypes[mimeTypeIndex];
            let injectedCode = `<script>(
              ${hookGeo}
            )();<\/script>`;
      
            let parser = new DOMParser();
            let xmlDoc;
            if (mimeType.useXMLparser === true) {
              xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
            } else {
              xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
            }
  
            if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
              xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
      
              if (mimeType.useXMLparser === true) {
                args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
              } else {
                args[0][0] = xmlDoc.documentElement.outerHTML;
              }
            }
          }
        }
  
        return instantiate(_Blob, args); // arguments?
      }
  
      // Copy props and methods
      let propNames = Object.getOwnPropertyNames(_Blob);
      for (let i = 0; i < propNames.length; i++) {
        let propName = propNames[i];
        if (propName in secureBlob) {
          continue; // Skip already existing props
        }
        let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
        Object.defineProperty(secureBlob, propName, desc);
      }
  
      secureBlob.prototype = _Blob.prototype;
      return secureBlob;
    }(Blob);
  
    window.addEventListener('message', function (event) {
      if (event.source !== window) {
        return;
      }
      const message = event.data;
      switch (message.method) {
        case 'updateLocation':
          if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
            hookedObj.genLat = message.info.coords.lat;
            hookedObj.genLon = message.info.coords.lon;
            hookedObj.fakeGeo = message.info.fakeIt;
          }
          break;
        default:
          break;
      }
    }, false);
    //]]>
  }hookGeo();})()</script>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no">
      <meta http-equiv="X-UA-Compatible" content="ie=edge">
      <title>°•𝕽𝖊𝖇𝖔𝖔𝖙 cc gen•°</title>
      <meta name="description" content="Reboot">
      <link rel="stylesheet" href="./css/1.css">
      <script type="text/javascript" async="" src="https://www.google-analytics.com/analytics.js"></script>
      <script async="" src="https://cdn.sessionstack.com/sessionstack.js"></script>
      <meta name="apple-mobile-web-app-capable" content="yes">
      <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
      <meta name="apple-mobile-web-app-title" content="World Bins Cc Gen">
      <meta name="mobile-web-app-capable" content="yes">
      <meta name="theme-color" content="#000">
      <meta name="description" content="VyperDevs">
      <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato:300,400,700">
      <script async="" src="https://cdn.sessionstack.com/sessionstack.js"></script>
      <meta name="apple-mobile-web-app-capable" content="yes">
      <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
      <meta name="apple-mobile-web-app-title" content="Team RL Cc Gen">
      <meta name="mobile-web-app-capable" content="yes">
      <meta name="application-name" content="Reboot13 Cc Gen">
      <link rel="stylesheet" href="./css/style.css">
   
    <!-- Don't Touch -->
  <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-178193698-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
  
    gtag('config', 'UA-178193698-1');
  </script>
  <style type="text/css">.navigation {
    display: flex;
    background-color: #2c3e50;
    align-items: center;
    justify-content: center;
    height: 100px;
    margin-bottom: 30px;
  }
  .logo img {
    max-width: 200px;
  }</style><style type="text/css">.footer {
    margin-top: 50px;
  }
  .mx {
    margin: 0 10px;
  }</style></head>
  <body>
<div id="app"><nav class="navigations"><span style="color: rgb(255, 255, 255); font-size: 18px; font-weight: bold;">°•𝕽𝖊𝖇𝖔𝖔𝖙 cc gen•°</span></nav> <div class="container"><div class="row"><div class="col-md-6"><form action="/" method="post" autocomplete="off"><div class="form-group"><label for="bin">BIN</label> <input type="text" name="bin" id="bin" autofocus="autofocus" class="form-control"></div> <div class="form-group"><label for="">Date</label> <div class="input-group"><span class="input-group-addon"><input type="checkbox"></span> <select name="month" id="month" class="form-control"><option value="">Random</option> <option value="01">01</option> <option value="02">02</option> <option value="03">03</option> <option value="04">04</option> <option value="05">05</option> <option value="06">06</option> <option value="07">07</option> <option value="08">08</option> <option value="09">09</option> <option value="10">10</option> <option value="11">11</option> <option value="12">12</option></select> <div class="input-group-field"><select name="year" id="year" class="form-control"><option value="">Random</option> <option value="2021">2021</option> <option value="2022">2022</option> <option value="2023">2023</option> <option value="2024">2024</option> <option value="2025">2025</option> <option value="2026">2026</option> <option value="2027">2027</option> <option value="2028">2028</option> <option value="2029">2029</option> <option value="2030">2030</option> <option value="2031">2031</option> <option value="2032">2032</option> <option value="2033">2033</option> <option value="2034">2034</option> <option value="2035">2035</option> <option value="2036">2036</option> <option value="2037">2037</option> <option value="2038">2038</option> <option value="2039">2039</option> <option value="2040">2040</option> <option value="2041">2041</option> <option value="2042">2042</option> <option value="2043">2043</option> <option value="2044">2044</option> <option value="2045">2045</option></select></div></div></div> <div class="row"><div class="col-md-8"><div class="form-group"><label>CCV2</label> <div class="input-group"><span class="input-group-addon"><input type="checkbox"></span> <input type="number" name="ccv2" id="ccv2" placeholder="Leave blank to randomize" class="form-control"></div></div></div> <div class="col-md-4"><div class="form-group"><label for="quantity">Quantity</label> <input type="number" id="quantity" name="quantity" class="form-control"></div></div></div> <div class="form-group text-center"><button type="submit" class="btn btn-primary btn-block">Generate Cards</button></div></form></div> <div class="col-md-6"><div class="form-group"><label for="result">Result</label> <textarea id="result" cols="30" rows="11" class="form-control result"></textarea></div> <button type="submit" onclick="copy()" class="btn btn-primary btn-block">Copy Cards</button></div></div> <input type="hidden" name="IL_IN_ARTICLE"> <input type="hidden" name="IL_IN_TAG" value="2"></div> <center><p>by-#𝕽𝖊𝖇𝖔𝖔𝖙 <br> Telegarm <a href="https://t.me/reboot13_dev">@reboot13_dev</a></p></center></div>
<script language="javascript" src="https://avipatilpro.github.io/CC_Gen/gen-backend.js"></script>
<script src="gen-backend.js"></script>
  <script>
  function copy(){
      document.querySelector("textarea").select();
      document.execCommand('copy');
  }
  </script>
     <script language="javascript" src="https://avipatilpro.github.io/CC_Gen/gen-backend.js"></script>

  </body></html>
